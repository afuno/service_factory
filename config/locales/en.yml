en:
  servactory:
    common:
      undefined_method:
        missing_name: "[%{service_class_name}] %{error_text}"
    methods:
      call:
        not_used: "[%{service_class_name}] Nothing to perform. Use `make` or create a `call` method."
      cannot_be_overwritten: "[%{service_class_name}] The following methods cannot be overwritten: %{list_of_methods}"
    inputs:
      undefined:
        getter: "[%{service_class_name}] Undefined input attribute `%{input_name}`"
        setter: "[%{service_class_name}] Undefined input attribute `%{input_name}`"
      validations:
        inclusion:
          default_error: "[%{service_class_name}] Wrong value in `%{input_name}`, must be one of `%{input_inclusion}`"
        must:
          default_error: "[%{service_class_name}] Input `%{input_name}` must \"%{code}\""
          syntax_error: "[%{service_class_name}] Syntax error inside `%{code}` of `%{input_name}` input: %{exception_message}"
        required:
          default_error:
            default: "[%{service_class_name}] Required input `%{input_name}` is missing"
            for_collection: "[%{service_class_name}] Required element in input collection `%{input_name}` is missing"
        type:
          default_error:
            default: "[%{service_class_name}] Wrong type of input `%{input_name}`, expected `%{expected_type}`, got `%{given_type}`"
            for_collection:
              wrong_element_type: "[%{service_class_name}] Wrong type in input collection `%{input_name}`, expected `%{expected_type}`, got `%{given_type}`"
            for_hash:
              wrong_element_type: "[%{service_class_name}] Wrong type in input hash `%{input_name}`, expected `%{expected_type}` for `%{key_name}`, got `%{given_type}`"
      tools:
        find_unnecessary:
          error: "[%{service_class_name}] Unexpected attributes: `%{unnecessary_attributes}`"
        rules:
          error: "[%{service_class_name}] Conflict in `%{input_name}` input options: `%{conflict_code}`"
    internals:
      undefined:
        getter: "[%{service_class_name}] Undefined internal attribute `%{internal_name}`"
        setter: "[%{service_class_name}] Undefined internal attribute `%{internal_name}`"
      validations:
        inclusion:
          default_error: "[%{service_class_name}] Wrong value in `%{internal_name}`, must be one of `%{internal_inclusion}`"
        must:
          default_error: "[%{service_class_name}] Internal attribute `%{internal_name}` must \"%{code}\""
          syntax_error: "[%{service_class_name}] Syntax error inside `%{code}` of `%{internal_name}` internal attribute"
        type:
          default_error:
            default: "[%{service_class_name}] Wrong type of internal attribute `%{internal_name}`, expected `%{expected_type}`, got `%{given_type}`"
            for_collection:
              wrong_type: "[%{service_class_name}] Wrong internal attribute collection type `%{internal_name}`, expected `%{expected_type}`, got `%{given_type}`"
              wrong_element_type: "[%{service_class_name}] Wrong element type in internal attribute collection `%{internal_name}`, expected `%{expected_type}`, got `%{given_type}`"
            for_hash:
              wrong_element_type: "[%{service_class_name}] Wrong type in internal attribute hash `%{internal_name}`, expected `%{expected_type}` for `%{key_name}`, got `%{given_type}`"
    outputs:
      undefined:
        getter: "[%{service_class_name}] Undefined output attribute `%{output_name}`"
        setter: "[%{service_class_name}] Undefined output attribute `%{output_name}`"
      validations:
        inclusion:
          default_error: "[%{service_class_name}] Wrong value in `%{output_name}`, must be one of `%{output_inclusion}`"
        must:
          default_error: "[%{service_class_name}] Output attribute `%{output_name}` must \"%{code}\""
          syntax_error: "[%{service_class_name}] Syntax error inside `%{code}` of `%{output_name}` output attribute"
        type:
          default_error:
            default: "[%{service_class_name}] Wrong type of output attribute `%{output_name}`, expected `%{expected_type}`, got `%{given_type}`"
            for_collection:
              wrong_type: "[%{service_class_name}] Wrong output attribute collection type `%{output_name}`, expected `%{expected_type}`, got `%{given_type}`"
              wrong_element_type: "[%{service_class_name}] Wrong element type in output attribute collection `%{output_name}`, expected `%{expected_type}`, got `%{given_type}`"
            for_hash:
              wrong_element_type: "[%{service_class_name}] Wrong type in output attribute hash `%{output_name}`, expected `%{expected_type}` for `%{key_name}`, got `%{given_type}`"
