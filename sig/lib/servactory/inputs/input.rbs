module Servactory
  module Inputs
    class Input
      attr_accessor value: untyped

      attr_reader name: Symbol
      attr_reader internal_name: Symbol?
      attr_reader collection_mode_class_names: Maintenance::CollectionMode::ClassNamesCollection
      attr_reader hash_mode_class_names: Maintenance::HashMode::ClassNamesCollection
      attr_reader option_helpers: Maintenance::Attributes::OptionHelpersCollection
      attr_reader collection_of_options: Maintenance::Attributes::OptionsCollection

      def initialize: (
        Symbol name,
        *Symbol helpers,
        as: Symbol?,
        collection_mode_class_names: Maintenance::CollectionMode::ClassNamesCollection,
        hash_mode_class_names: Maintenance::HashMode::ClassNamesCollection,
        option_helpers: Maintenance::Attributes::OptionHelpersCollection,
        **untyped options
      ) -> void

      def method_missing: (Symbol name, *untyped args) { () -> untyped } -> void

      def respond_to_missing?: (Symbol name, *untyped) -> void

      def register_options: (helpers: Array[Symbol], options: Hash[Symbol, untyped]) -> Maintenance::Attributes::OptionsCollection

      def apply_helpers_for_options: (helpers: Array[Symbol], options: Hash[Symbol, untyped]) -> Hash[Symbol, untyped]

      def options_for_checks: () -> Hash[Symbol, untyped]

      def conflict_code: -> (Symbol | nil)

      def system_name: -> Symbol

      def i18n_name: -> String

      def with_conflicts?: -> bool

      def input?: -> bool

      def internal?: -> bool

      def output?: -> bool
    end
  end
end
