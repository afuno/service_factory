module Servactory
  module Context
    module Workspace
      @inputs: Inputs
      @internals: Internals
      @outputs: Outputs
      @servactory_service_storage: { internals: {}, outputs: {} }

      attr_reader incoming_arguments: untyped
      attr_reader collection_of_inputs: Servactory::Inputs::Collection
      attr_reader collection_of_internals: Servactory::Internals::Collection
      attr_reader collection_of_outputs: Servactory::Outputs::Collection
      attr_reader collection_of_stages: Servactory::Methods::StageCollection

      def inputs: -> Inputs
      alias inp inputs

      def internals: -> Internals
      alias int internals

      def outputs: -> Outputs
      alias out outputs

      def initialize: () -> void

      def fail_input!: (Symbol input_name, message: String) -> Exception

      def fail!: (message: String, meta: untyped?) -> Exception

      private

      def _call!: (
        incoming_arguments: untyped,
        collection_of_inputs: Servactory::Inputs::Collection,
        collection_of_internals: Servactory::Internals::Collection,
        collection_of_outputs: Servactory::Outputs::Collection,
        collection_of_stages: Servactory::Methods::StageCollection
      ) -> untyped

      def call!: (
        incoming_arguments: untyped,
        collection_of_inputs: Servactory::Inputs::Collection,
        collection_of_internals: Servactory::Internals::Collection,
        collection_of_outputs: Servactory::Outputs::Collection,
        ** untyped
      ) -> untyped

      def call: -> Exception

      def servactory_service_storage: -> { internals: {}, outputs: {} }

      def assign_servactory_service_storage_internal: (Symbol key, untyped value) -> untyped

      def fetch_servactory_service_storage_internal: (Symbol key) -> untyped

      def assign_servactory_service_storage_output: (Symbol key, untyped value) -> untyped

      def fetch_servactory_service_storage_output: (Symbol key) -> untyped
    end
  end
end
