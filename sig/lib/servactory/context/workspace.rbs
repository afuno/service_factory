module Servactory
  module Context
    module Workspace
      @inputs: Inputs
      @internals: Internals
      @outputs: Outputs
      @servactory_service_store: Context::Store

      attr_reader incoming_arguments: Hash[Symbol, untyped]
      attr_reader collection_of_inputs: Inputs::Collection
      attr_reader collection_of_internals: Internals::Collection
      attr_reader collection_of_outputs: Outputs::Collection
      attr_reader collection_of_stages: Actions::Stages::Collection

      def inputs: -> Inputs
      alias inp inputs

      def internals: -> Internals
      alias int internals

      def outputs: -> Outputs
      alias out outputs

      def initialize: () -> void

      def success!: () -> Exception

      def fail_input!: (Symbol input_name, message: String, meta: untyped?) -> Exception

      def fail_internal!: (Symbol internal_name, message: String, meta: untyped?) -> Exception

      def fail_output!: (Symbol output_name, message: String, meta: untyped?) -> Exception

      def fail!: (Symbol type, message: String, meta: untyped?) -> Exception

      def fail_result!: (Result service_result) -> Exception

      private

      def _call!: (
        incoming_arguments: Hash[Symbol, untyped],
        collection_of_inputs: Inputs::Collection,
        collection_of_internals: Internals::Collection,
        collection_of_outputs: Outputs::Collection,
        collection_of_stages: Actions::Stages::Collection
      ) -> void

      def call!: (
        incoming_arguments: Hash[Symbol, untyped],
        collection_of_inputs: Inputs::Collection,
        collection_of_internals: Internals::Collection,
        collection_of_outputs: Outputs::Collection,
        ** untyped
      ) -> void

      def call: -> Exception

      def servactory_service_store: -> Store
    end
  end
end
