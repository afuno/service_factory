module Servactory
  module Context
    class Store
      @context: instance

      @inputs: Hash[Symbol, untyped]

      @internals: Hash[Symbol, untyped]

      @outputs: Hash[Symbol, untyped]

      @context_data: Hash[Symbol, untyped]

      @context_id: String

      def initialize: (instance context) -> void

      def assign_inputs: (Hash[Symbol, untyped] arguments) -> Hash[Symbol, untyped]

      def fetch_input: (Symbol name) -> untyped

      def assign_internal: (Symbol name, untyped value) -> Hash[Symbol, untyped]

      def fetch_internal: (Symbol name) -> untyped

      def assign_output: (Symbol name, untyped value) -> Hash[Symbol, untyped]

      def fetch_output: (Symbol name) -> untyped

      def inputs: () -> Hash[Symbol, untyped]

      def internals: () -> Hash[Symbol, untyped]

      def outputs: () -> Hash[Symbol, untyped]

      private

      def assign_attribute: (Symbol section, Symbol name, untyped value) -> untyped

      def context_data: () -> Hash[Symbol, untyped]

      def state: () -> Hash[String, Hash[Symbol, (Warehouse::Inputs | Warehouse::Internals | Warehouse::Outputs)]]

      def context_id: () -> String
    end
  end
end
