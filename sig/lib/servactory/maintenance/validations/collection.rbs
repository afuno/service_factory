module Servactory
  module Maintenance
    module Validations
      class Collection
        @types: Array[Class]
        @value: untyped
        @consists_of: untyped
        @valid: bool
        @prepared_type: Class
        @attribute_consists_of_types: Array[Class]
        @unnecessary_types: Array[Class]

        attr_reader errors: Array[Hash[Symbol, String]]

        def self.validate: (*untyped) ?{ () -> untyped } -> self

        def initialize: (
          types: Array[Class],
          value: untyped,
          consists_of: untyped
        ) -> void

        def validate: () -> self

        def valid?: () -> bool

        private

        def validate_value!: -> void

        def prepared_type: -> Class

        def attribute_consists_of_types: -> Array[Class]

        def unnecessary_types: -> Array[Class]

        def prepared_types_from: (Array[Class] types) -> Array[Class]

        def add_error: (expected_type: String, given_type: String) -> Array[Hash[Symbol, String]]
      end
    end
  end
end
