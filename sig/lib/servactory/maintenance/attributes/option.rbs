module Servactory
  module Maintenance
    module Attributes
      class Option
        DEFAULT_BODY: ^(key: Symbol, value: bool?, message: String?) -> Proc

        attr_reader name: Symbol

        attr_reader validation_class: Class?

        attr_reader define_methods: Array[Attributes::DefineConflict]?

        attr_reader define_conflicts: Array[Attributes::DefineConflict]?

        attr_reader need_for_checks: bool

        attr_reader body_key: Symbol?
        attr_reader body_value: (bool | Class)?
        attr_reader body: ({ is: Symbol, message: String? } | Array[Class] | bool?)

        def initialize: (
          name: Symbol,
          input: Inputs::Input,
          ?validation_class: Class?,
          need_for_checks: bool,
          ?body_key: Symbol?,
          ?body_value: (bool | Class)?,
          ?body_fallback: (bool | Class)?,
          ?original_value: Array[Class]?,
          ?define_methods: Array[DefineMethod]?,
          ?define_conflicts: Array[DefineConflict]?,
          ?with_advanced_mode: bool,
          **untyped options
        ) -> void

        def need_for_checks?: -> bool

        private

        @define_input_methods_template: String

        def prepare_value_for: (
          ?original_value: Array[Class]?,
          options: untyped,
          body_fallback: (bool | Class),
          with_advanced_mode: bool
        ) -> ({ is: Symbol, message: String? } | bool)

        def prepare_advanced_for: (body: ({ is: Symbol, message: String? }? | bool?), body_fallback: (bool | Class)) -> { is: Symbol, message: String? }

        def prepare_input_methods_for: (Inputs::Input input) -> void

        def define_input_methods_template: -> String?
      end
    end
  end
end
